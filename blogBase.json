{"singlePage": ["link"], "startSite": "07/23/2025", "filingNum": "", "onePageListNum": 64, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark_colorblind", "urlMode": "pinyin", "script": "", "style": "", "head": "", "indexScript": "", "indexStyle": "", "bottomText": "\u8f6c\u8f7d\u6587\u7ae0\u8bf7\u6ce8\u660e\u51fa\u5904", "showPostSource": 1, "iconList": {}, "UTC": 8, "rssSplit": "sentence", "exlink": {}, "needComment": 1, "allHead": "<script src='https://OmnisyR.github.io/assets/GmeekVercount.js'></script><script src='https://OmnisyR.github.io/assets/Language.js'></script><meta name='google-site-verification' content='jL_vSMve-woq2yALbGnRHeP86_xTVwPvJYu6vfAQiWo' />", "title": "OmnisyR's Blog", "subTitle": ";;;eRecording the bits and pieces of scientific research, development, and life.;;;e;;;c\u8bb0\u5f55\u79d1\u7814\u3001\u5f00\u53d1\u4ee5\u53ca\u751f\u6d3b\u7684\u70b9\u70b9\u6ef4\u6ef4;;;c", "homeUrl": "https://OmnisyR.github.io", "avatarUrl": "https://avatars.githubusercontent.com/u/68898477?s=400&u=262ae3b76f651c62a82042317aaae313706c859c&v=4", "GMEEK_VERSION": "main", "email": "lxuan233@gmail.com", "primerCSS": "<link href='https://OmnisyR.github.io/assets/Primer.css' rel='stylesheet' />", "postListJson": {"P3": {"htmlDir": "docs/post/;;;eNavi;;;e;;;c-dao-hang-;;;c.html", "labels": [";;;eNavi;;;e;;;c\u5bfc\u822a;;;c"], "postTitle": ";;;eNavi;;;e;;;c\u5bfc\u822a;;;c", "postUrl": "post/%3B%3B%3BeNavi%3B%3B%3Be%3B%3B%3Bc-dao-hang-%3B%3B%3Bc.html", "postSourceUrl": "https://github.com/OmnisyR/OmnisyR.github.io/issues/3", "commentNum": 0, "wordCount": 617, "description": "<!-- ##{'script':'<script src='https://OmnisyR.github.io/assets/GmeekTOC.js'></script>'}## -->\n\n## ;;;eDiffusion Models;;;e;;;c\u6269\u6563\u6a21\u578b;;;c\n[;;;eAn overview of Diffusion Models;;;e;;;c\u6269\u6563\u6a21\u578b\u6982\u8ff0;;;c](https://omnisyr.github.io/post/%3B%3B%3BeAn%20Overview%20of%20Diffusion%20Models%3B%3B%3Be%3B%3B%3Bc-kuo-san-mo-xing-gai-shu-%3B%3B%3Bc.html)\n\n### \u79bb\u6563\u578b\u6269\u6563\u6a21\u578b\n[;;;eThe Foundation of Diffusion Models:;;;e;;;c\u6269\u6563\u6a21\u578b\u7684\u57fa\u77f3\uff1a;;;cDDPM](https://omnisyr.github.io/post/%3B%3B%3BeThe%20Foundation%20of%20Diffusion%20Models-%3B%3B%3Be%3B%3B%3Bc-kuo-san-mo-xing-de-ji-shi-%EF%BC%9A%3B%3B%3BcDDPM.html)\n\n### \u8fde\u7eed\u578b\u6269\u6563\u6a21\u578b\n\n## MCMod\u5f00\u53d1\n\n## \u4e32\u53e3\u5c4f\u5f00\u53d1\n\n## \u788e\u788e\u5ff5\n\u3002", "top": 1, "createdAt": 1753326083, "style": "", "script": "<script src='https://OmnisyR.github.io/assets/GmeekTOC.js'></script>", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/68898477?s=400&u=262ae3b76f651c62a82042317aaae313706c859c&v=4", "createdDate": "2025-07-24", "dateLabelColor": "#0969da"}, "P4": {"htmlDir": "docs/post/;;;eAn Overview of Diffusion Models;;;e;;;c-kuo-san-mo-xing-gai-shu-;;;c.html", "labels": [";;;eDiffusion Models;;;e;;;c\u6269\u6563\u6a21\u578b;;;c", ";;;e!Under Construction!;;;e;;;c!\u65bd\u5de5\u4e2d!;;;c"], "postTitle": ";;;eAn Overview of Diffusion Models;;;e;;;c\u6269\u6563\u6a21\u578b\u6982\u8ff0;;;c", "postUrl": "post/%3B%3B%3BeAn%20Overview%20of%20Diffusion%20Models%3B%3B%3Be%3B%3B%3Bc-kuo-san-mo-xing-gai-shu-%3B%3B%3Bc.html", "postSourceUrl": "https://github.com/OmnisyR/OmnisyR.github.io/issues/4", "commentNum": 0, "wordCount": 2746, "description": "> [!NOTE]\n> This article currently only supports Chinese.\n\n> [!CAUTION]\n> \u65bd\u5de5\u4e2d\uff01\n\n<!-- ##{'script':'<script src='https://OmnisyR.github.io/assets/HyperTOC.js'></script>'}## -->\n\n;;;a\n;;;;\u751f\u6210\u5f0f\u6a21\u578b::\u5728\u5b9e\u9645\u8fd0\u7528\u4e2d\uff0c\u4f9d\u636e\u7528\u6237\u7684\u5f15\u5bfc\u6027\u8f93\u5165\u6216\u662f\u4e0d\u4f9d\u9760\u8f93\u5165\uff0c\u5c31\u53ef\u4ee5\u751f\u6210\u51fa\u4e00\u7cfb\u5217\u6570\u636e\u7684\u6a21\u578b\uff08\u8fd9\u4e9b\u6570\u636e\u5f80\u5f80\u5728\u73b0\u5b9e\u4e2d\u4e0d\u5b58\u5728\uff09;;;;\n;;;;\u53d8\u5206\u81ea\u7f16\u7801\u5668::\u7b80\u79f0VAE;;;;\n;;;;\u751f\u6210\u5f0f\u5bf9\u6297\u6a21\u578b::GANs;;;;\n;;;;\u6cdb\u6027::\u4e0d\u62d8\u6ce5\u4e8e\u6570\u636e\u96c6\uff0c\u80fd\u591f;;;;\n;;;;\u8d28\u91cf::\u770b\u8d77\u6765\u548c\u771f\u7684\u4e00\u6837;;;;\n;;;;Deep Unsupervised Learning using Nonequilibrium Thermodynamics::\u6587\u7ae0\u5730\u5740\uff1ahttps://arxiv.org/abs/1503.03585;;;;\n;;;;Denoising Diffusion Probabilistic Models(DDPM)::\u6587\u7ae0\u5730\u5740\uff1ahttps://arxiv.org/abs/2006.11239;;;;\n;;;;\u4e00\u5b9a\u6bd4\u4f8b::\u53c8\u79f0\u566a\u58f0\u65f6\u95f4\u8868\u3002", "top": 0, "createdAt": 1753326152, "style": "<style>.markdown-alert{padding:0.5rem 1rem;margin-bottom:1rem;border-left:.25em solid var(--borderColor-default,var(--color-border-default));}.markdown-alert .markdown-alert-title {display:flex;font-weight:var(--base-text-weight-medium,500);align-items:center;line-height:1;}.markdown-alert>:first-child {margin-top:0;}.markdown-alert>:last-child {margin-bottom:0;}</style><style>.markdown-alert.markdown-alert-note {border-left-color:var(--borderColor-accent-emphasis, var(--color-accent-emphasis));background-color:var(--color-accent-subtle);}.markdown-alert.markdown-alert-note .markdown-alert-title {color: var(--fgColor-accent,var(--color-accent-fg));}</style><style>.markdown-alert.markdown-alert-caution {border-left-color:var(--borderColor-danger-emphasis, var(--color-danger-emphasis));background-color:var(--color-danger-subtle);}.markdown-alert.markdown-alert-caution .markdown-alert-title {color: var(--fgColor-danger,var(--color-danger-fg));}</style>", "script": "<script src='https://OmnisyR.github.io/assets/HyperTOC.js'></script>", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/68898477?s=400&u=262ae3b76f651c62a82042317aaae313706c859c&v=4", "createdDate": "2025-07-24", "dateLabelColor": "#0969da"}, "P6": {"htmlDir": "docs/post/;;;eThe Foundation of Diffusion Models-;;;e;;;c-kuo-san-mo-xing-de-ji-shi-\uff1a;;;cDDPM.html", "labels": [";;;eDiffusion Models;;;e;;;c\u6269\u6563\u6a21\u578b;;;c"], "postTitle": ";;;eThe Foundation of Diffusion Models:;;;e;;;c\u6269\u6563\u6a21\u578b\u7684\u57fa\u77f3\uff1a;;;cDDPM", "postUrl": "post/%3B%3B%3BeThe%20Foundation%20of%20Diffusion%20Models-%3B%3B%3Be%3B%3B%3Bc-kuo-san-mo-xing-de-ji-shi-%EF%BC%9A%3B%3B%3BcDDPM.html", "postSourceUrl": "https://github.com/OmnisyR/OmnisyR.github.io/issues/6", "commentNum": 0, "wordCount": 59014, "description": "<!-- ##{'script':'<script src='https://OmnisyR.github.io/assets/HyperTOC.js'></script>'}## -->\n;;;a\n;;;;;;;eCopy and paste the code directly::Or just click [me](https://github.com/OmnisyR/diffusion_demo/tree/main/ddpm/en) to go to the full version.;;;e;;;c\u76f4\u63a5\u590d\u5236\u7c98\u8d34::\u6216\u662f\u70b9[\u6211](https://github.com/OmnisyR/diffusion_demo/tree/main/ddpm/cn)\u8f6c\u5230\u5b8c\u5168\u7248\u3002", "top": 0, "createdAt": 1753426945, "style": "", "script": "<script src='https://OmnisyR.github.io/assets/HyperTOC.js'></script><script>MathJax = {tex: {inlineMath: [[\"$\", \"$\"]]}};</script><script async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"></script>", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/68898477?s=400&u=262ae3b76f651c62a82042317aaae313706c859c&v=4", "createdDate": "2025-07-25", "dateLabelColor": "#0969da"}, "P8": {"htmlDir": "docs/post/;;;eModeling and Production of AC-43 in Guilty Gear;;;e;;;c-zui-e-zhuang-bei-zhong-AC-43-de-jian-mo-yu-zhi-zuo-;;;c.html", "labels": [";;;eIndustrial Modeling;;;e;;;c\u5de5\u4e1a\u5efa\u6a21;;;c", ";;;e!Under Construction!;;;e;;;c!\u65bd\u5de5\u4e2d!;;;c"], "postTitle": ";;;eModeling and Production of AC/43 in Guilty Gear;;;e;;;c\u7f6a\u6076\u88c5\u5907\u4e2dAC/43\u7684\u5efa\u6a21\u4e0e\u5236\u4f5c;;;c", "postUrl": "post/%3B%3B%3BeModeling%20and%20Production%20of%20AC-43%20in%20Guilty%20Gear%3B%3B%3Be%3B%3B%3Bc-zui-e-zhuang-bei-zhong-AC-43-de-jian-mo-yu-zhi-zuo-%3B%3B%3Bc.html", "postSourceUrl": "https://github.com/OmnisyR/OmnisyR.github.io/issues/8", "commentNum": 0, "wordCount": 1807, "description": "> [!NOTE]\n> This article currently only supports Chinese.\n\n> [!CAUTION]\n> \u65bd\u5de5\u4e2d\uff01\n\n<!-- ##{'script':'<script src='https://OmnisyR.github.io/assets/HyperTOC.js'></script>'}## -->\n\n;;;a\n;;;;UE Viewer::[\u4e0b\u8f7d\u754c\u9762](https://www.gildor.org/en/projects/umodel#files);;;;\n;;;a\n## \u5199\u5728\u524d\u9762\nGGST\u4e2d\u6700\u5438\u5f15\u6211\u7684\u6b66\u5668\u83ab\u8fc7\u4e8eUnika\u7684AC/43\u4e86\u3002", "top": 0, "createdAt": 1755245237, "style": "<style>.markdown-alert{padding:0.5rem 1rem;margin-bottom:1rem;border-left:.25em solid var(--borderColor-default,var(--color-border-default));}.markdown-alert .markdown-alert-title {display:flex;font-weight:var(--base-text-weight-medium,500);align-items:center;line-height:1;}.markdown-alert>:first-child {margin-top:0;}.markdown-alert>:last-child {margin-bottom:0;}</style><style>.markdown-alert.markdown-alert-note {border-left-color:var(--borderColor-accent-emphasis, var(--color-accent-emphasis));background-color:var(--color-accent-subtle);}.markdown-alert.markdown-alert-note .markdown-alert-title {color: var(--fgColor-accent,var(--color-accent-fg));}</style><style>.markdown-alert.markdown-alert-caution {border-left-color:var(--borderColor-danger-emphasis, var(--color-danger-emphasis));background-color:var(--color-danger-subtle);}.markdown-alert.markdown-alert-caution .markdown-alert-title {color: var(--fgColor-danger,var(--color-danger-fg));}</style>", "script": "<script src='https://OmnisyR.github.io/assets/HyperTOC.js'></script>", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/68898477?s=400&u=262ae3b76f651c62a82042317aaae313706c859c&v=4", "createdDate": "2025-08-15", "dateLabelColor": "#0969da"}, "P9": {"htmlDir": "docs/post/;;;eNon-Solid Curves with Arrows in Matplotlib;;;e;;;cMatplotlib-zhong-dai-jian-tou-de-fei-shi-qu-xian-;;;c.html", "labels": [";;;eCharting and Graphing;;;e;;;c\u56fe\u8868\u7ed8\u5236;;;c"], "postTitle": ";;;eNon-Solid Curves with Arrows in Matplotlib;;;e;;;cMatplotlib\u4e2d\u5e26\u7bad\u5934\u7684\u975e\u5b9e\u66f2\u7ebf;;;c", "postUrl": "post/%3B%3B%3BeNon-Solid%20Curves%20with%20Arrows%20in%20Matplotlib%3B%3B%3Be%3B%3B%3BcMatplotlib-zhong-dai-jian-tou-de-fei-shi-qu-xian-%3B%3B%3Bc.html", "postSourceUrl": "https://github.com/OmnisyR/OmnisyR.github.io/issues/9", "commentNum": 0, "wordCount": 17674, "description": "<!-- ##{'script':'<script src='https://OmnisyR.github.io/assets/HyperTOC.js'></script>'}## -->\n;;;a\n;;;;;;;eNote::note;;;e;;;c\u6ce8\u91ca::\u6ce8\u91ca;;;c;;;;\n;;;a;;;e\n## Introduction\nThis article will explain how to use Matplotlib to plot non-solid curves with arrows, as shown in the figure below:\n\n`Gmeek-html<p align='center'><img srcset='https://OmnisyR.github.io/figs/arrow_example.png' width='400' height='400'/></p>`\n\nMatplotlib offers a rich set of built-in methods, yet it lacks a built-in function for drawing non-solid curves with arrows. While some online discussions exist on this topic, they haven't provided satisfactory solutions. Therefore, I conducted my own investigation into plotting such curves, aiming to create flawless, perfect non-solid curves with arrows.\n\n## Methods Provided by Matplotlib and Related Issues\nIn Matplotlib, you can use FancyArrowPatch to create a curve with an arrowhead:\n```python\nimport matplotlib.patches as patches\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(1, 1, figsize=(4, 4))\nax.set_xlim(0, 2)\nax.set_ylim(0, 2)\nax.add_patch(patches.FancyArrowPatch(\n    posA=(0.1, 0.1), posB=(1.8, 1.8), arrowstyle='-|>, head_width=4, head_length=8',\n    connectionstyle='arc3,rad=0.3', color='#515151', shrinkA=0, shrinkB=0\n))\nplt.savefig('arrow_common.png', dpi=600)\n```\n`Gmeek-html<p align='center'><img srcset='https://OmnisyR.github.io/figs/arrow_common.png' width='400' height='400'/></p>`\n\nHowever, if you want to render this curve as a non-solid line by simply changing its style, problems will arise:\n```python\n# ...\nax.add_patch(patches.FancyArrowPatch(\n  # ...\n  linestyle='--'\n)\n# ...\n```\n`Gmeek-html<p align='center'><img srcset='https://OmnisyR.github.io/figs/arrow_error.png' width='400' height='400'/></p>`\n\nAs can be seen, the arrow points are also drawn using dashed lines. Moreover, when using this method for plotting, the curvature of the curve is interface-dependent rather than coordinate-dependent. This means that when altering the x-axis or y-axis range of the chart, the curvature of the curve will still maintain visual consistency. In certain situations, this cannot be considered a rigorous plotting method.\n\n## Method\nBy emulating the drawing method for non-solid lines with arrows, it can be treated as two components: the non-solid curve and the solid arrowhead.\n\n### Non-Solid Curve\nMatplotlib implements curve drawing using quadratic B\u00e9zier curves. Examining the source code reveals that given points A and B, and an angle rad in radians, the coordinates of control point C can be determined using the following formula:\n\n$$\nx_C = \\frac{x_A + x_B}{2} + rad \u00b7 (y_B - y_A)\n$$\n$$\ny_C = \\frac{y_A + y_B}{2} - rad \u00b7 (x_B - x_A)\n$$\n\n`Gmeek-html<p align='center'><img srcset='https://OmnisyR.github.io/figs/arrow_arc3.png' width='400' height='400'/></p>`\n\nCA is tangent to the curve at point A, and CB is tangent to the curve at point B. This allows the non-solid curve to be drawn using the code below:\n```python\nimport matplotlib.patches as patches\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef draw_arc3(from_, to_, rad, detail=False, color='#515151'):\n    x1, y1 = np.array(from_)\n    x2, y2 = np.array(to_)\n    dx, dy = x2 - x1, y2 - y1\n    x12, y12 = (x1 + x2) / 2., (y1 + y2) / 2.\n    cx, cy = x12 + rad * dy, y12 - rad * dx\n    control_ = (cx, cy)\n    vertices = [from_, control_, to_]\n    codes = [patches.Path.MOVETO, patches.Path.CURVE3, patches.Path.CURVE3]\n    path = patches.Path(vertices, codes)\n    patch = patches.PathPatch(path, facecolor='none', edgecolor=color, linestyle='--', linewidth=1)\n    ax.add_patch(patch)\n    if not detail:\n        return\n    ax.scatter(control_[0], control_[1], c=color, marker='x', s=12, linewidths=0.8)\n    ax.scatter(from_[0], from_[1], c=color, marker='x', s=12, linewidths=0.8)\n    ax.scatter(to_[0], to_[1], c=color, marker='x', s=12, linewidths=0.8)\n    ax.plot((control_[0], from_[0]), (control_[1], from_[1]), color=color, linewidth=.5, linestyle=':')\n    ax.plot((control_[0], to_[0]), (control_[1], to_[1]), color=color, linewidth=.5, linestyle=':')\n    ax.annotate(r'$A$', from_, ha='center', va='bottom')\n    ax.annotate(r'$B$', to_, ha='center', va='bottom')\n    ax.annotate(r'$C$', control_, ha='right', va='bottom')\n\nfig, ax = plt.subplots(1, 1, figsize=(4, 4))\nax.set_xlim(0, 2)\nax.set_ylim(0, 2)\ndraw_arc3((0.1, 0.1), (1.8, 1.8), 0.3)\nplt.savefig('arrow_arc3_dot.png', dpi=600)\n```\n`Gmeek-html<p align='center'><img srcset='https://OmnisyR.github.io/figs/arrow_arc3_dot.png' width='400' height='400'/></p>`\n\n### Solid Line Arrow\nWith control point C and target endpoint B already defined, drawing a solid line arrow is straightforward. The following code easily creates an arrow that meets the requirements:\n```python\n# ...\nax.annotate('', to_, xytext=control_, arrowprops=dict(\n    linewidth=0, arrowstyle='-|>, head_width=0.3, head_length=0.6',\n    shrinkA=0, shrinkB=0, facecolor=color, linestyle='solid', mutation_scale=10\n))\n# ...\n```\n\nHowever, upon closer inspection, issues remain apparent: as shown in the figure below, the width at the very tip of the arrow is narrower than the curve's width, resulting in an aesthetically displeasing visual effect.\n`Gmeek-html<p align='center'><img srcset='https://OmnisyR.github.io/figs/arrow_arc3_arrow_error.png' width='400' height='400'/></p>`\n\nTo address this, consider placing a mask between the curve and the arrow to conceal the excess curve portion:\n`Gmeek-html<p align='center'><img srcset='https://OmnisyR.github.io/figs/arrow_arc3_arrow_mask.png' width='400' height='400'/></p>`\n\nThe placement of masks can be achieved through a simple algorithm:\n```python\n# ...\n# Place the non-solid curve on layer -2\npatch = patches.PathPatch(# ...\n      zorder=-2)\n# ...\nsize = 0.08\ndirection = -1 if control_[0] < to_[0] else 1\nmask = patches.FancyBboxPatch(\n     (to_[0], to_[1] - size / 2), direction * size, size, boxstyle='square, pad=0',\n     ec='red', fc='red', linewidth=1, zorder=-1\n)\nde = math.degrees(math.atan((control_[1] - to_[1]) / (control_[0] - to_[0])))\ntf = transforms.Affine2D().rotate_deg_around(to_[0], to_[1], de) + ax.transData\ncut.set_transform(tf)\nax.add_patch(cut)\n# ...\n```\n\n`Gmeek-html<p align='center'><img srcset='https://OmnisyR.github.io/figs/arrow_direction.png' width='400' height='400'/></p>`\nThis allows for precise placement of the mask. The center point in the image is point B, the target endpoint, with surrounding areas indicating the directions of potential control points.\n\n### Non-Solid Curves with Arrows\nFinally, by integrating these two components and specifying certain parameters for control, one can complete the drawing of non-solid curves with arrows.\n```python\nimport math\n\nimport matplotlib.patches as patches\nimport matplotlib.pyplot as plt\nimport matplotlib.transforms as transforms\nimport numpy as np\n\ndef add_arrow(from_, to_, rad=0.3, control_=None, color='#515151',\n              line='--', head_length=0.6, size=0.04, detail=False):\n    '''\n    :param from_:Starting point\n    :param to_:Target endpoint\n    :param rad:Curve radius\n    :param control_:Control points;\n                    if None, calculated based on the curvature of the curve.\n    :param color:Drawing colors\n    :param line:Curve Style\n    :param head_length:Arrow size\n    :param size:Mask Size\n    :param detail:Select whether to draw details,\n                  and manually adjust the mask size by drawing details.\n    '''\n    if control_ is None:\n        x1, y1 = np.array(from_)\n        x2, y2 = np.array(to_)\n        dx, dy = x2 - x1, y2 - y1\n        x12, y12 = (x1 + x2) / 2., (y1 + y2) / 2.\n        cx, cy = x12 + rad * dy, y12 - rad * dx\n        control_ = (cx, cy)\n    vertices = [from_, control_, to_]\n    codes = [patches.Path.MOVETO, patches.Path.CURVE3, patches.Path.CURVE3]\n    path = patches.Path(vertices, codes)\n    patch = patches.PathPatch(path, facecolor='none', edgecolor=color,\n                              linestyle=line, linewidth=1, zorder=-2)\n    ax.add_patch(patch)\n    direction = -1 if control_[0] < to_[0] else 1\n    mask_c = 'red' if detail else 'white'\n    mask = patches.FancyBboxPatch(\n        (to_[0], to_[1] - size / 2), direction * size, size, boxstyle='square, pad=0',\n        ec=mask_c, fc=mask_c, zorder=-1, linewidth=1)\n    de = math.degrees(math.atan((control_[1] - to_[1]) / (control_[0] - to_[0])))\n    tf = transforms.Affine2D().rotate_deg_around(to_[0], to_[1], de) + ax.transData\n    mask.set_transform(tf)\n    ax.add_patch(mask)\n    ax.annotate('', to_, xytext=control_, arrowprops=dict(\n        linewidth=0,\n        arrowstyle='-|>, head_width=%f, head_length=%f' % (head_length / 2, head_length),\n        shrinkA=0, shrinkB=0, facecolor=color, linestyle='solid', mutation_scale=10\n    ))\n    if not detail:\n        return\n    ax.scatter(control_[0], control_[1], c=color, marker='x', s=12, linewidths=0.8)\n    ax.scatter(from_[0], from_[1], c=color, marker='x', s=12, linewidths=0.8)\n    ax.scatter(to_[0], to_[1], c=color, marker='x', s=12, linewidths=0.8)\n    ax.plot((control_[0], from_[0]), (control_[1], from_[1]), color=color, linewidth=.5, linestyle=':')\n    ax.plot((control_[0], to_[0]), (control_[1], to_[1]), color=color, linewidth=.5, linestyle=':')\n\ndef draw_eg():\n    debug = False\n    add_arrow((0.1, 0.1), (1.5, 1.6), rad=0.1, color=colors[1], detail=debug)\n    add_arrow((0.4, 1.7), (1.4, 0.7), rad=0.8, color=colors[2], detail=debug)\n    add_arrow((1.9, 1.9), (1.2, 0.1), rad=-0.2, color=colors[3], detail=debug)\n    add_arrow((1.7, 0.7), (0.3, 1.8), rad=0.5, color=colors[4], detail=debug)\n    plt.savefig('arrow_example%s.png' % ('_detail' if debug else ''), dpi=600)\n\nfig, ax = plt.subplots(1, 1, figsize=(4, 4))\nax.set_xlim(0, 2)\nax.set_ylim(0, 2)\ncolors = ['#515151', '#CC9900', '#B177DE', '#37AD6B', '#1A6FDF']\ndraw_eg()\n```\n`Gmeek-html<p align='center'><img srcset='https://OmnisyR.github.io/figs/arrow_example_cat.png' width='800' height='400'/></p>`\n;;;e;;;c\n## \u4ecb\u7ecd\n\u672c\u6587\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Matplotlib\u6765\u7ed8\u5236\u5e26\u7bad\u5934\u7684\u975e\u5b9e\u66f2\u7ebf\uff0c\u5c31\u50cf\u4e0b\u56fe\u4e00\u6837\uff1a\n\n`Gmeek-html<p align='center'><img srcset='https://OmnisyR.github.io/figs/arrow_example.png' width='400' height='400'/></p>`\n\nMatplotlib\u5185\u7f6e\u7684\u65b9\u6cd5\u5f88\u4e30\u5bcc\uff0c\u4f46\u5b83\u5374\u5e76\u672a\u5185\u7f6e\u5e26\u7bad\u5934\u7684\u975e\u5b9e\u66f2\u7ebf\u7684\u65b9\u6cd5\uff0c\u7f51\u7edc\u4e0a\u4e5f\u6709\u4e00\u4e9b\u76f8\u5173\u8ba8\u8bba\uff0c\u4f46\u5e76\u672a\u7ed9\u51fa\u5f88\u597d\u7684\u89e3\u7b54\u3002", "top": 0, "createdAt": 1758683187, "style": "", "script": "<script src='https://OmnisyR.github.io/assets/HyperTOC.js'></script><script>MathJax = {tex: {inlineMath: [[\"$\", \"$\"]]}};</script><script async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"></script>", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/68898477?s=400&u=262ae3b76f651c62a82042317aaae313706c859c&v=4", "createdDate": "2025-09-24", "dateLabelColor": "#0969da"}}, "singeListJson": {"P7": {"htmlDir": "docs/link.html", "labels": ["link"], "postTitle": "\u94fe\u63a5\u5e93", "postUrl": "link.html", "postSourceUrl": "https://github.com/OmnisyR/OmnisyR.github.io/issues/7", "commentNum": 0, "wordCount": 57, "description": "## \u8bb0\u5f55\u4e00\u4e9b\u5e38\u7528\u7684\u5c0f\u5de5\u5177\n[\u6587\u4ef6\u7ed3\u6784\u6811\u751f\u6210\u5668](https://tree.nathanfriend.com/)\n\u3002", "top": 0, "createdAt": 1755242731, "style": "", "script": "", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/68898477?s=400&u=262ae3b76f651c62a82042317aaae313706c859c&v=4", "createdDate": "2025-08-15", "dateLabelColor": "#0969da"}}, "labelColorDict": {";;;e!Under Construction!;;;e;;;c!\u65bd\u5de5\u4e2d!;;;c": "#b60205", ";;;eCharting and Graphing;;;e;;;c\u56fe\u8868\u7ed8\u5236;;;c": "#2e13ce", ";;;eDiffusion Models;;;e;;;c\u6269\u6563\u6a21\u578b;;;c": "#ac52d1", ";;;eIndustrial Modeling;;;e;;;c\u5de5\u4e1a\u5efa\u6a21;;;c": "#83acda", ";;;eNavi;;;e;;;c\u5bfc\u822a;;;c": "#6fe100", "\\eTest\\e\\c\u6d4b\u8bd5\\c": "#009276", "link": "#2e37c7"}, "displayTitle": "OmnisyR's Blog", "faviconUrl": "https://avatars.githubusercontent.com/u/68898477?s=400&u=262ae3b76f651c62a82042317aaae313706c859c&v=4", "ogImage": "https://avatars.githubusercontent.com/u/68898477?s=400&u=262ae3b76f651c62a82042317aaae313706c859c&v=4", "prevUrl": "disabled", "nextUrl": "disabled"}